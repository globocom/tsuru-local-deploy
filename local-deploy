#!/usr/bin/env bash

trap "exit 1" TERM
export TOP_PID=$$

function editor() {
	[ "$EDITOR" != "" ] && echo $EDITOR && return
	which vi && return
	which nano && return
	which ed
}

function quit() {
	kill $TOP_PID
}

function download() {
	if ! tsuru app-info -a $APP > /dev/null
	then
		quit
	fi
	if [ "$1" != "" ]
	then
		ENVS=$1
	fi
	if [ "$COPY_ENV" == "1" ]
	then
		TEMPFILE=$(mktemp)
		echo "# Check env variables bellow from tsuru to be copied to local" > $TEMPFILE
		echo "" >> $TEMPFILE
		tsuru app-run -a $APP -o "env|sed \"s/\(^[^=]*=\)\(.*\)/export \1'\2'/\"" >> $TEMPFILE
		$(editor) $TEMPFILE
		ENVS=$(cat $TEMPFILE)
	fi
	echo "Wait while copying unit. It may take several minutes..." 
	if ! tsuru app-run -oi "echo \"$ENVS\" > /home/ubuntu/.envs; sudo tar -czf - 2>/dev/null / | base64" -a $APP | base64 --decode | docker import - $DOCKER_IMG
	then
		echo "Error while downloading!" > /dev/stderr
		quit
	fi
	echo "Download done!"
}

function get_start_script() {
	PARSED_PROCFILE=$(docker run -it --rm $FOLDER_CMD $DOCKER_IMG cat /home/application/current/Procfile | tr -d "\r" | grep -E '^[a-zA-Z0-9\-]+:[ ]*([^ ].+)$')
	if [ "$PROCESSNAME" == "" ]
	then
		echo "$PARSED_PROCFILE" | cut -f2- -d: | paste -sd"&" -
	else
		if ! echo "$PARSED_PROCFILE" | grep "^$PROCESSNAME:" > /dev/null 2>&1
		then
			echo "$PROCESSNAME not found" > /dev/stderr
			quit
		fi
		echo "$PARSED_PROCFILE" | grep "^$PROCESSNAME:" | cut -f2- -d:
	fi
}

function get_docker_envs() {
	docker run -it --rm $DOCKER_IMG cat /home/ubuntu/.envs | tr -d "\r" 
}

function start(){
	if [ -z "$(docker images $DOCKER_IMG -q)" ]
	then
		echo "Downloading image..."
		export COPY_ENV=1
		download
	fi
	[ "$FOLDER" != "" ] && export FOLDER_CMD="-v $FOLDER:/home/application/current"
	eval docker run -it --rm $FOLDER_CMD -e PORT=8888 -e port=8888 -u ubuntu -w /home/application/current -p $PORT:8888 $DOCKER_IMG /bin/bash -lc  \"tail -f /dev/null \& source /home/ubuntu/.envs \&\& $(get_start_script)\"
}

function update() {
	ENVS=$(get_docker_envs)
	delete && download "$ENVS" && start
}

function delete() {
	if [ -z "$(docker images $DOCKER_IMG -q)" ]
	then
		echo "Image not found" > /dev/stderr
	else
		docker rmi $DOCKER_IMG:latest --force
	fi
}

function main() {
	case "$1" in
	   update)
		  update
		  ;;
	   start)
		  start
		  ;;
	   delete)
		  delete
		  ;;
	esac
}

function help() {
	echo "Tsuru $(basename $0) plugin has 3 commands: start, update and delete"
	echo ""
	echo "Start Usage: tsuru $(basename $0) start -a|--app <appname> [-p|--process <processname>] [-l|--local-folder <folderpath>] [-P|--port <port|8888>]"
	echo ""
	echo "Update Usage: tsuru $(basename $0) update -a|--app <appname> [-p|--process <processname>] [-l|--local-folder <folderpath>] [-P|--port <port|8888>] [-c|--copy-environment]"
	echo ""
	echo "Delete Usage: tsuru $(basename $0) delete -a|--app <appname>"
	echo ""

}

unset FOLDER_CMD
unset FOLDER
unset ENVS
unset APP
unset DOCKER_IMG
export COPY_ENV=0
export PORT=8888

while [[ $# -ge 1 ]]
do
	key="$1"
	case $key in
		""|--help|-h)
			help
			exit 0
		;;
		-a|--app)
			export APP="$2"
			export DOCKER_IMG="$APP-tsuru"
			shift # past argument
		;;
		-p|--process)
			export PROCESSNAME="$2"
			shift # past argument
		;;
		-P|--port)
			export PORT="$2"
			shift # past argument
		;;
		-c|--copy-environment)
			export COPY_ENV=1
		;;
		-l|--local-folder)
			export FOLDER="$(cd $2; pwd)"
			shift # past argument
		;;
		update|start|delete)
			MODE="$1" 
		;;
		*)
			help > /dev/stderr
			quit
		;;
	esac
	shift # past argument or value
done

if [ ! which docker > /dev/null ]
then
	echo "Please install docker" > /dev/stderr
	quit
fi

if [ "$APP" == "" ] || [ "$MODE" == "" ]
then
	help > /dev/stderr
	quit
fi

main "$MODE"
